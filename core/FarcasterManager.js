class FarcasterManager {
    constructor() {
        this.isFrameEnvironment = false;
        this.isReady = false;
        this.context = null;
        this.user = null;
        this.sdk = null;
        this.readyCalled = false; // –§–ª–∞–≥ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        this.callbacks = {
            ready: [],
            contextUpdate: [],
            frameAdded: [],
            frameRemoved: [],
            notificationsEnabled: [],
            notificationsDisabled: []
        };

        // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º init() –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ - –±—É–¥–µ–º –≤—ã–∑—ã–≤–∞—Ç—å —è–≤–Ω–æ
    }

    async initialize() {
        console.log('FarcasterManager: Initializing...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ Mini App
        const isMiniAppEnvironment = this.detectMiniAppEnvironment();

        if (!isMiniAppEnvironment) {
            console.log('‚è≠Ô∏è Not in Mini App environment, skipping Farcaster initialization');
            this.simulateReady();
            return;
        }

        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π SDK (–¥–ª—è web)
            if (window.sdk) {
                console.log('üîÑ Using pre-loaded window.sdk...');
                this.sdk = window.sdk;
                this.isFrameEnvironment = true;
                console.log('‚úÖ Pre-loaded SDK found');
            } else {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º SDK —á–µ—Ä–µ–∑ import (–¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏)
                console.log('üîÑ Loading Farcaster SDK via import...');
                const { sdk } = await import('https://esm.sh/@farcaster/frame-sdk');
                this.sdk = sdk;
                this.isFrameEnvironment = true;
                console.log('‚úÖ Farcaster SDK loaded via import');
            }

            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–°–ï–ì–î–ê –≤—ã–∑—ã–≤–∞–µ–º ready() –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            await this.callReadyEarly();

            // –ó–∞—Ç–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            await this.setupMiniAppFeatures();

        } catch (error) {
            console.error('‚ùå Error loading Farcaster SDK:', error);
            this.isFrameEnvironment = false;
            this.simulateReady();
        }
    }

    detectMiniAppEnvironment() {
        // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Mini App
        const hasParent = window.parent !== window;
        const hasFrameReferrer = document.referrer.includes('warpcast.com') || 
                                document.referrer.includes('farcaster');
        const hasWindowSdk = typeof window.sdk !== 'undefined';
        const userAgent = navigator.userAgent || '';
        const isMobileApp = userAgent.includes('Warpcast') || userAgent.includes('Farcaster');

        const isMiniApp = hasParent || hasFrameReferrer || hasWindowSdk || isMobileApp;

        console.log('üîç Environment detection:', {
            hasParent,
            hasFrameReferrer,
            hasWindowSdk,
            isMobileApp,
            isMiniApp,
            userAgent: userAgent.substring(0, 100),
            windowSdkType: typeof window.sdk,
            windowSdkExists: !!window.sdk
        });

        return isMiniApp;
    }

    async callReadyEarly() {
        if (this.readyCalled) {
            console.log('‚ö†Ô∏è Ready already called, skipping');
            return;
        }

        let attempts = 0;
        const maxAttempts = 10; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö

        console.log('üöÄ Starting ready() call process...');

        while (attempts < maxAttempts && !this.readyCalled) {
            try {
                console.log(`üöÄ Calling ready() (attempt ${attempts + 1}/${maxAttempts})...`);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å SDK –±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ
                if (!this.sdk) {
                    console.log('‚ö†Ô∏è SDK not available, waiting...');
                    await new Promise(resolve => setTimeout(resolve, 200));
                    attempts++;
                    continue;
                }

                if (!this.sdk.actions) {
                    console.log('‚ö†Ô∏è SDK actions not available, waiting...');
                    await new Promise(resolve => setTimeout(resolve, 200));
                    attempts++;
                    continue;
                }

                if (typeof this.sdk.actions.ready !== 'function') {
                    console.log('‚ö†Ô∏è SDK ready function not available, waiting...');
                    await new Promise(resolve => setTimeout(resolve, 200));
                    attempts++;
                    continue;
                }

                // –í—ã–∑—ã–≤–∞–µ–º ready() —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
                await this.sdk.actions.ready({
                    disableNativeGestures: false
                });

                this.readyCalled = true;
                console.log('‚úÖ Ready() call successful - splash screen should be dismissed');
                return;

            } catch (error) {
                console.warn(`‚ö†Ô∏è Ready() attempt ${attempts + 1} failed:`, error.message);
                console.warn('Error details:', error);
                attempts++;

                if (attempts < maxAttempts) {
                    // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏
                    const delay = 200 + (attempts * 300);
                    console.log(`‚è≥ Retrying ready() in ${delay}ms...`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                } else {
                    console.error('‚ùå Failed to call ready() after all attempts');
                    console.error('This may cause issues on mobile devices with splash screens');
                }
            }
        }
    }

    async setupMiniAppFeatures() {
        try {
            this.setupEventListeners();

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç - —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Proxy –æ–±—ä–µ–∫—Ç–æ–≤
            try {
                this.context = await this.sdk.context;
                console.log('üìã Farcaster context received');

                // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                if (this.context && this.context.user) {
                    this.user = this.context.user;

                    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ Proxy –æ–±—ä–µ–∫—Ç–∞–º
                    try {
                        const userInfo = {
                            fid: await this.resolveValue(this.user.fid),
                            username: await this.resolveValue(this.user.username),
                            displayName: await this.resolveValue(this.user.displayName)
                        };
                        console.log('üë§ User info:', userInfo);
                    } catch (userError) {
                        console.log('‚ö†Ô∏è Could not resolve user details:', userError.message);
                    }
                }
            } catch (contextError) {
                console.log('‚ö†Ô∏è Could not get context:', contextError.message);
            }

            this.isReady = true;

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–ª–±—ç–∫–∏ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            this.notifyReadyCallbacks();

            console.log('üéâ Mini App features setup complete');
        } catch (error) {
            console.error('Error setting up Mini App features:', error);
            this.simulateReady();
        }
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å Proxy –æ–±—ä–µ–∫—Ç–∞–º–∏ –æ—Ç Farcaster SDK
    async resolveValue(value) {
        if (value === null || value === undefined) {
            return value;
        }

        // –ï—Å–ª–∏ —ç—Ç–æ Proxy —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º –µ—ë
        if (typeof value === 'function') {
            return await value();
        }

        // –ï—Å–ª–∏ —ç—Ç–æ Promise, –∂–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (value && typeof value.then === 'function') {
            return await value;
        }

        return value;
    }

    setupEventListeners() {
        if (!this.sdk) return;

        try {
            this.sdk.on('frameAdded', (data) => {
                console.log('FarcasterManager: Frame added event:', data);
                this.callbacks.frameAdded.forEach(callback => {
                    try {
                        callback(data);
                    } catch (error) {
                        console.error('FarcasterManager: Error in frameAdded callback:', error);
                    }
                });
            });

            this.sdk.on('frameRemoved', (data) => {
                console.log('FarcasterManager: Frame removed event:', data);
                this.callbacks.frameRemoved.forEach(callback => {
                    try {
                        callback(data);
                    } catch (error) {
                        console.error('FarcasterManager: Error in frameRemoved callback:', error);
                    }
                });
            });

            this.sdk.on('notificationsEnabled', (data) => {
                console.log('FarcasterManager: Notifications enabled event:', data);
                this.callbacks.notificationsEnabled.forEach(callback => {
                    try {
                        callback(data);
                    } catch (error) {
                        console.error('FarcasterManager: Error in notificationsEnabled callback:', error);
                    }
                });
            });

            this.sdk.on('notificationsDisabled', (data) => {
                console.log('FarcasterManager: Notifications disabled event:', data);
                this.callbacks.notificationsDisabled.forEach(callback => {
                    try {
                        callback(data);
                    } catch (error) {
                        console.error('FarcasterManager: Error in notificationsDisabled callback:', error);
                    }
                });
            });

            console.log('üì° Farcaster event listeners setup complete');
        } catch (error) {
            console.error('FarcasterManager: Error setting up event listeners:', error);
        }
    }

    notifyReadyCallbacks() {
        this.callbacks.ready.forEach(callback => {
            try {
                callback(this.context);
            } catch (error) {
                console.error('FarcasterManager: Error in ready callback:', error);
            }
        });
    }

    simulateReady() {
        console.log('üîÑ Simulating ready state for non-frame environment');
        this.isReady = true;
        this.notifyReadyCallbacks();
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    async getSafeAreaInsets() {
        try {
            if (!this.context?.client?.safeAreaInsets) {
                return { top: 0, bottom: 0, left: 0, right: 0 };
            }

            const insets = this.context.client.safeAreaInsets;
            return {
                top: await this.resolveValue(insets.top) || 0,
                bottom: await this.resolveValue(insets.bottom) || 0,
                left: await this.resolveValue(insets.left) || 0,
                right: await this.resolveValue(insets.right) || 0
            };
        } catch (error) {
            console.error('Error getting safe area insets:', error);
            return { top: 0, bottom: 0, left: 0, right: 0 };
        }
    }

    async getUserInfo() {
        try {
            if (!this.user) {
                return null;
            }

            return {
                fid: await this.resolveValue(this.user.fid),
                username: await this.resolveValue(this.user.username),
                displayName: await this.resolveValue(this.user.displayName),
                pfpUrl: await this.resolveValue(this.user.pfpUrl)
            };
        } catch (error) {
            console.error('Error getting user info:', error);
            return null;
        }
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã API (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    isInFrame() {
        return this.isFrameEnvironment;
    }

    getContext() {
        return this.context;
    }

    getUser() {
        return this.user;
    }

    onReady(callback) {
        if (this.isReady) {
            try {
                callback(this.context);
            } catch (error) {
                console.error('FarcasterManager: Error in immediate ready callback:', error);
            }
        } else {
            this.callbacks.ready.push(callback);
        }
    }

    onFrameAdded(callback) {
        this.callbacks.frameAdded.push(callback);
    }

    onFrameRemoved(callback) {
        this.callbacks.frameRemoved.push(callback);
    }

    onNotificationsEnabled(callback) {
        this.callbacks.notificationsEnabled.push(callback);
    }

    onNotificationsDisabled(callback) {
        this.callbacks.notificationsDisabled.push(callback);
    }

    async addFrame() {
        if (this.sdk && this.sdk.actions && this.sdk.actions.addFrame) {
            try {
                await this.sdk.actions.addFrame();
                console.log('‚úÖ Add frame action completed');
            } catch (error) {
                console.error('‚ùå Add frame action failed:', error);
                throw error;
            }
        } else {
            console.warn('‚ö†Ô∏è Add frame action not available');
        }
    }

    async close() {
        if (this.sdk && this.sdk.actions && this.sdk.actions.close) {
            try {
                await this.sdk.actions.close();
                console.log('‚úÖ Close action completed');
            } catch (error) {
                console.error('‚ùå Close action failed:', error);
                throw error;
            }
        } else {
            console.warn('‚ö†Ô∏è Close action not available');
        }
    }

    async openUrl(url) {
        if (this.sdk && this.sdk.actions && this.sdk.actions.openUrl) {
            try {
                await this.sdk.actions.openUrl(url);
                console.log('‚úÖ Open URL action completed:', url);
            } catch (error) {
                console.error('‚ùå Open URL action failed:', error);
                throw error;
            }
        } else {
            console.warn('‚ö†Ô∏è Open URL action not available');
            // Fallback –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
            window.open(url, '_blank');
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
console.log('üöÄ Creating FarcasterManager instance...');
window.farcasterIntegration = new FarcasterManager();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
window.farcasterIntegration.initialize().then(() => {
    console.log('üéâ FarcasterManager initialization complete');
}).catch(error => {
    console.error('‚ùå FarcasterManager initialization failed:', error);
});