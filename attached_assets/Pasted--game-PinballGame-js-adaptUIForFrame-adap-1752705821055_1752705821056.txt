
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –¥–ª—è game/PinballGame.js

// –ó–∞–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥ adaptUIForFrame –Ω–∞ —ç—Ç–æ—Ç:
adaptUIForFrame(context) {
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º UI –¥–ª—è frame –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('PinballGame: Adapting UI for Farcaster frame');

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    try {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏ - –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã
        const client = context?.client;
        const safeAreaInsets = client?.safeAreaInsets;

        if (safeAreaInsets) {
            console.log('PinballGame: Got safe area insets:', safeAreaInsets);

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            const top = safeAreaInsets.top || 0;
            const bottom = safeAreaInsets.bottom || 0;
            const left = safeAreaInsets.left || 0;
            const right = safeAreaInsets.right || 0;

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
            const gameContainer = document.querySelector('.game-container');
            if (gameContainer) {
                gameContainer.style.paddingTop = `${top}px`;
                gameContainer.style.paddingBottom = `${bottom}px`;
                gameContainer.style.paddingLeft = `${left}px`;
                gameContainer.style.paddingRight = `${right}px`;
            }

            console.log('PinballGame: Applied safe area insets:', { top, bottom, left, right });
        }

        // –°–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ frame –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        const webOnlyElements = document.querySelectorAll('.web-only');
        webOnlyElements.forEach(element => {
            element.style.display = 'none';
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º frame-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const frameOnlyElements = document.querySelectorAll('.frame-only');
        frameOnlyElements.forEach(element => {
            element.style.display = 'block';
        });

    } catch (error) {
        console.error('PinballGame: Error adapting UI for frame:', error);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "Add to Apps" –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
    const tapToStartContent = document.querySelector('.tap-to-start-content');
    if (tapToStartContent && !document.getElementById('addToAppsBtn')) {
        const addButton = document.createElement('button');
        addButton.id = 'addToAppsBtn';
        addButton.className = 'restart-btn';
        addButton.textContent = '‚≠ê Add to Apps';
        addButton.style.marginTop = '10px';
        addButton.style.background = 'var(--accent-color, #4CAF50)';

        addButton.addEventListener('click', async () => {
            try {
                const success = await window.farcasterManager.addToFavorites();
                if (success) {
                    this.showNotification('Added to your apps! üéÆ', 'success');
                } else {
                    this.showNotification('Already in your apps! ‚≠ê', 'info');
                }
            } catch (error) {
                console.error('Failed to add to apps:', error);
                this.showNotification('Failed to add to apps', 'error');
            }
        });

        tapToStartContent.appendChild(addButton);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "Share Score" –≤ game over overlay
    const gameOverContent = document.querySelector('.game-over-content');
    if (gameOverContent && !document.getElementById('shareScoreBtn')) {
        const shareButton = document.createElement('button');
        shareButton.id = 'shareScoreBtn';
        shareButton.className = 'restart-btn';
        shareButton.textContent = 'üì± Share Score';
        shareButton.style.marginTop = '10px';
        shareButton.style.background = 'var(--accent-color, #ff6b35)';

        shareButton.addEventListener('click', async () => {
            const currentScore = this.gameState ? this.gameState.score : 0;
            const level = this.currentLevel ? this.currentLevel.name : 'Pinball';

            try {
                await window.farcasterManager.composeCast({
                    text: `Just scored ${currentScore} points in ${level}! üéÆ‚ö°\n\nPlay the game yourself:`,
                    embeds: [window.location.href]
                });

                this.showNotification('Cast created! üìù', 'success');
            } catch (error) {
                console.error('Failed to share score:', error);
                this.showNotification('Failed to share score', 'error');
            }
        });

        gameOverContent.appendChild(shareButton);
    }
}

// –ó–∞–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥ displayUserInfo –Ω–∞ —ç—Ç–æ—Ç:
displayUserInfo(user) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Farcaster
    const tapToStartContent = document.querySelector('.tap-to-start-content');
    if (!tapToStartContent) return;

    try {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é - user —É–∂–µ –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
        const userData = user;

        if (!userData) return;

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–∞–Ω–Ω—ã–µ —É–∂–µ –ø—Ä–æ—Å—Ç—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞, –Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏
        const username = userData.username;
        const pfpUrl = userData.pfpUrl;
        const displayName = userData.displayName;

        if (!username) return;

        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingUserInfo = document.getElementById('farcasterUserInfo');
        if (existingUserInfo) {
            existingUserInfo.remove();
        }

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const userInfoElement = document.createElement('div');
        userInfoElement.id = 'farcasterUserInfo';
        userInfoElement.style.cssText = `
            margin-top: 15px;
            padding: 10px;
            background: rgba(0, 0, 0, 0.7);
            border-radius: 8px;
            text-align: center;
            color: #ffffff;
            font-size: 14px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        `;

        let userContent = `<div style="display: flex; align-items: center; justify-content: center; gap: 10px;">`;
        
        if (pfpUrl) {
            userContent += `<img src="${pfpUrl}" alt="Profile" style="width: 32px; height: 32px; border-radius: 50%; border: 2px solid #fff;">`;
        }
        
        userContent += `<div>`;
        userContent += `<div style="font-weight: bold;">@${username}</div>`;
        
        if (displayName && displayName !== username) {
            userContent += `<div style="font-size: 12px; opacity: 0.8;">${displayName}</div>`;
        }
        
        userContent += `</div></div>`;
        
        userInfoElement.innerHTML = userContent;
        tapToStartContent.appendChild(userInfoElement);

        console.log('FarcasterManager: User info displayed for', username);
    } catch (error) {
        console.error('FarcasterManager: Error displaying user info:', error);
    }
}

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç:
showNotification(message, type) {
    type = type || 'info';

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 12px 20px;
        border-radius: 8px;
        z-index: 10000;
        font-size: 14px;
        font-weight: 500;
        max-width: 300px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        transform: translateX(100%);
        transition: transform 0.3s ease;
    `;

    // –¶–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    const colors = {
        success: { bg: '#4CAF50', text: '#fff' },
        error: { bg: '#f44336', text: '#fff' },
        info: { bg: '#2196F3', text: '#fff' },
        warning: { bg: '#ff9800', text: '#fff' }
    };

    const color = colors[type] || colors.info;
    notification.style.backgroundColor = color.bg;
    notification.style.color = color.text;
    notification.textContent = message;

    document.body.appendChild(notification);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 10);

    // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}