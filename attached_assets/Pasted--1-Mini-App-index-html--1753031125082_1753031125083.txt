–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è
1. –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º Mini App –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
–í index.html —É –≤–∞—Å –µ—Å—Ç—å –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Mini App:
javascriptwindow.isMiniApp = window.parent !== window || 
                  window.location.search.includes('miniApp=true') ||
                  navigator.userAgent.includes('Warpcast') ||
                  navigator.userAgent.includes('Farcaster');
–ü—Ä–æ–±–ª–µ–º–∞: –ù–∞ –º–æ–±–∏–ª—å–Ω–æ–º Farcaster —ç—Ç–∞ –ª–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ —É—Å–ª–æ–≤–∏–µ window.parent !== window.
–†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ SDK –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è:
javascript// –ó–∞–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –Ω–∞:
<script type="module">
    async function detectMiniApp() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º SDK
            const { sdk } = await import('https://esm.sh/@farcaster/miniapp-sdk');
            window.sdk = sdk;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            const isMiniApp = await sdk.isInMiniApp();
            window.isMiniApp = isMiniApp;
            
            console.log('‚úÖ Mini App environment detected:', isMiniApp);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FarcasterManager —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ SDK
            if (window.FarcasterManager && isMiniApp) {
                window.farcasterManager = new FarcasterManager();
            }
        } catch (error) {
            console.error('‚ùå Failed to detect Mini App environment:', error);
            window.isMiniApp = false;
        }
    }
    
    detectMiniApp();
</script>
2. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–π–º–∏–Ω—Ç–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
–ü—Ä–æ–±–ª–µ–º–∞: FarcasterManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ SDK –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω.
–†–µ—à–µ–Ω–∏–µ: –ò–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ index.html:
javascript// –í –∫–æ–Ω—Ü–µ body, –∑–∞–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –Ω–∞:
<script>
    window.addEventListener('load', async () => {
        console.log('Page loaded, waiting for SDK...');
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ SDK
        let attempts = 0;
        while (!window.sdk && attempts < 100) {
            await new Promise(resolve => setTimeout(resolve, 50));
            attempts++;
        }
        
        if (window.sdk && window.isMiniApp) {
            console.log('SDK ready, initializing game...');
            const game = new PinballGame();
        } else {
            console.log('No SDK or not in Mini App, initializing regular game...');
            const game = new PinballGame();
        }
    });
</script>
3. –£–ª—É—á—à–µ–Ω–∏–µ FarcasterManager –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
–í core/FarcasterManager.js –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ:
javascriptasync waitForSDK() {
    let attempts = 0;
    const maxAttempts = 100; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ

    while (attempts < maxAttempts) {
        if (window.sdk && typeof window.sdk.actions === 'object') {
            console.log(`FarcasterManager: SDK loaded after ${attempts * 50}ms`);
            return window.sdk;
        }
        await new Promise(resolve => setTimeout(resolve, 50));
        attempts++;
    }
    throw new Error('SDK not loaded within timeout');
}

async callReadyWithRetry() {
    const maxAttempts = 5; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
        try {
            console.log(`üöÄ Ready() attempt ${attempt}/${maxAttempts}...`);
            
            // –î–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if (this.sdk.context) {
                await this.sdk.context; // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            }
            
            await this.sdk.actions.ready();
            console.log(`‚úÖ Ready() successful on attempt ${attempt}`);
            return;
            
        } catch (error) {
            console.warn(`‚ö†Ô∏è Ready() attempt ${attempt} failed:`, error.message);
            
            if (attempt < maxAttempts) {
                const delay = attempt * 1000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                console.log(`‚è≥ Waiting ${delay}ms before retry...`);
                await new Promise(resolve => setTimeout(resolve, delay));
            } else {
                throw error;
            }
        }
    }
}