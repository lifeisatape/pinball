// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô PinballGame.js - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
class PinballGame {
    constructor() {
        this.canvas = document.getElementById('gameCanvas');
        this.ctx = this.canvas.getContext('2d');

        this.levelManager = new LevelManager();
        this.levelSelector = new LevelSelector();
        this.renderer = new GameRenderer(this.canvas);
        this.inputManager = null;
        this.gameState = new GameState();
        this.scorePanel = new ScorePanel();
        this.gameOverOverlay = new GameOverOverlay();
        this.tapToStartScreen = document.getElementById('tapToStartScreen');
        this.loadingScreen = document.getElementById('loadingScreen');
        this.levelSelectScreen = document.getElementById('levelSelectScreen');

        this.ball = null;
        this.gameStarted = false;
        this.currentLevel = null;
        this.userHasInteracted = false;

        // ‚úÖ –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        this.soundsLoaded = false;

        this.setupEventListeners();
        this.showTapToStartScreen();
        
        // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–≤—É–∫–∏ –≤ —Ñ–æ–Ω–µ –ù–ï–ó–ê–í–ò–°–ò–ú–û –æ—Ç ready()
        this.loadSoundsInBackground();
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ "tap to start"
        this.tapToStartScreen.addEventListener('click', async () => {
            console.log('üéÆ User clicked TAP TO START');
            this.userHasInteracted = true;
            
            // ‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞—É–¥–∏–æ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            this.activateAudioContext();
            this.startGame();
        });

        this.tapToStartScreen.addEventListener('touchstart', async () => {
            console.log('üéÆ User touched TAP TO START');
            this.userHasInteracted = true;
            
            this.activateAudioContext();
            this.startGame();
        }, { passive: true });

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
        document.getElementById('restartGame').addEventListener('click', () => {
            this.restartGame();
        });

        document.getElementById('backToMenu').addEventListener('click', () => {
            this.showLevelSelect();
        });

        document.getElementById('startLevel').addEventListener('click', () => {
            const selectedLevel = this.levelSelector.getCurrentLevel();
            if (selectedLevel) {
                this.loadSelectedLevel(selectedLevel);
            } else {
                alert('Please select a level first!');
            }
        });
    }

    // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –ñ–î–ï–ú –ó–í–£–ö–ò, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ —Ñ–æ–Ω–µ
    async loadSoundsInBackground() {
        if (window.soundManager) {
            try {
                console.log('üîä Loading sounds in background (non-blocking)...');
                // –ù–ï await - –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º ready()!
                window.soundManager.preloadAllSounds().then(() => {
                    this.soundsLoaded = true;
                    console.log('‚úÖ Sounds loaded in background');
                }).catch(error => {
                    console.warn('‚ö†Ô∏è Sound loading failed, continuing without audio:', error);
                    this.soundsLoaded = false;
                });
            } catch (error) {
                console.warn('‚ö†Ô∏è Sound manager not available:', error);
            }
        }
    }

    // ‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞—É–¥–∏–æ (–Ω–µ async, –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–∞—è)
    activateAudioContext() {
        if (window.soundManager && window.soundManager.audioContext) {
            try {
                console.log('üîä Activating audio context...');
                // –ù–µ await - –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–≥—Ä—É
                window.soundManager.unlock().catch(error => {
                    console.warn('‚ö†Ô∏è Audio activation failed:', error);
                });
            } catch (error) {
                console.warn('‚ö†Ô∏è Audio activation error:', error);
            }
        }
    }

    // ‚úÖ –ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Farcaster (–±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
    setupSimpleFarcasterIntegration() {
        console.log('üîÑ Setting up simple Farcaster integration...');
        
        if (window.sdk && window.farcasterContext) {
            console.log('‚úÖ Farcaster SDK ready');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            const user = window.farcasterContext.user;
            if (user) {
                console.log('üë§ Farcaster user:', user);
                this.displayUserInfo(user);
            }
            
            // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º UI –¥–ª—è Mini App
            this.adaptUIForMiniApp();
        }
    }

    displayUserInfo(user) {
        console.log('üë§ Displaying user info:', user);
        
        // –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const userInfo = document.getElementById('farcasterUserInfo');
        if (userInfo) {
            userInfo.innerHTML = `
                <div>Welcome, ${user.displayName || user.username || 'Player'}!</div>
                ${user.pfpUrl ? `<img src="${user.pfpUrl}" width="32" height="32" style="border-radius: 50%;">` : ''}
            `;
            userInfo.style.display = 'block';
        }
    }

    adaptUIForMiniApp() {
        console.log('üé® Adapting UI for Mini App');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è Mini App
        const shareButton = document.getElementById('shareScoreBtn');
        if (shareButton) {
            shareButton.style.display = 'block';
            shareButton.addEventListener('click', () => {
                this.shareScore();
            });
        }

        const addToAppsButton = document.getElementById('addToAppsBtn');
        if (addToAppsButton) {
            addToAppsButton.style.display = 'block';
            addToAppsButton.addEventListener('click', () => {
                this.addToFavorites();
            });
        }
    }

    // ‚úÖ –ü—Ä–æ—Å—Ç–æ–µ —à–∞—Ä–µ–Ω–∏–µ (–±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏)
    async shareScore() {
        if (window.sdk && window.sdk.actions && window.sdk.actions.composeCast) {
            try {
                const text = `üéÆ I just scored ${this.gameState.score || 0} points and reached level ${this.gameState.level || 1} in Pinball All Stars! Can you beat that? üöÄ`;
                const url = window.location.origin;

                await window.sdk.actions.composeCast({
                    text: text,
                    embeds: [url]
                });
                
                console.log('‚úÖ Score shared successfully');
            } catch (error) {
                console.error('‚ùå Error sharing score:', error);
            }
        } else {
            console.log('‚ö†Ô∏è Cannot share - Farcaster not available');
        }
    }

    // ‚úÖ –ü—Ä–æ—Å—Ç–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    async addToFavorites() {
        if (window.sdk && window.sdk.actions && window.sdk.actions.addMiniApp) {
            try {
                await window.sdk.actions.addMiniApp();
                console.log('‚úÖ Add to favorites prompted');
            } catch (error) {
                console.error('‚ùå Error adding to favorites:', error);
            }
        } else {
            console.log('‚ö†Ô∏è Cannot add to favorites - Farcaster not available');
        }
    }

    // ‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã (–ù–ï –ñ–î–ï–ú –∑–≤—É–∫–∏)
    startGame() {
        console.log('üéÆ Starting game immediately...');

        // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω "tap to start"
        this.tapToStartScreen.style.display = 'none';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –°–†–ê–ó–£
        this.showLevelSelect();
    }

    showTapToStartScreen() {
        this.tapToStartScreen.style.display = 'flex';
        this.loadingScreen.style.display = 'none';
        this.levelSelectScreen.style.display = 'none';
    }

    showLevelSelect() {
        this.tapToStartScreen.style.display = 'none';
        this.loadingScreen.style.display = 'none';
        this.levelSelectScreen.style.display = 'flex';
        
        if (this.levelSelector) {
            this.levelSelector.render();
        }
    }

    hideStartScreen() {
        this.tapToStartScreen.style.display = 'none';
        this.levelSelectScreen.style.display = 'none';
    }

    async loadSelectedLevel(levelName) {
        try {
            console.log(`üéÆ Loading level: ${levelName}`);
            
            const levelData = await this.levelManager.loadLevel(levelName);
            if (levelData) {
                this.currentLevel = levelData;
                await this.initializeGame();
            } else {
                console.error('Failed to load level:', levelName);
                alert('Failed to load level. Please try again.');
            }
        } catch (error) {
            console.error('Error loading level:', error);
            alert('Error loading level. Please try again.');
        }
    }

    async initializeGame() {
        try {
            if (!this.currentLevel) return;

            this.hideStartScreen();
            this.inputManager = new InputManager(this.canvas, this.currentLevel.flippers);
            this.resetBall();
            this.updateUI();
            this.gameStarted = true;

            if (!this.gameLoopRunning) {
                this.gameLoopRunning = true;
                this.gameLoop();
            }
        } catch (error) {
            console.error('Failed to initialize game:', error);
        }
    }

    resetBall() {
        this.ball = new Ball(CONFIG.VIRTUAL_WIDTH * 0.51, 50);
        this.ball.velocity.x = 0;
        this.ball.velocity.y = 0;
        this.gameState.ballInPlay = true;
    }

    restartGame() {
        if (this.currentLevel) {
            this.gameState.reset();
            this.resetBall();
            this.updateUI();
            this.gameOverOverlay.hide();
        }
    }

    updateUI() {
        if (this.scorePanel) {
            this.scorePanel.update({
                score: this.gameState.score,
                level: this.gameState.level,
                lives: this.gameState.lives
            });
        }
    }

    gameLoop() {
        if (!this.gameStarted || !this.currentLevel) {
            this.gameLoopRunning = false;
            return;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–∑–∏–∫–∏, —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏ —Ç.–¥.
        // (–≤–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞)
        
        if (this.gameLoopRunning) {
            requestAnimationFrame(() => this.gameLoop());
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    gameOver() {
        console.log('üéÆ Game Over');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω game over
        this.gameOverOverlay.show({
            finalScore: this.gameState.score,
            levelReached: this.gameState.level
        });

        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ Farcaster
        if (window.sdk && window.farcasterContext) {
            setTimeout(() => {
                if (confirm('Share your score on Farcaster?')) {
                    this.shareScore();
                }
            }, 1000);
        }
    }

    // ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å)
    playSound(soundName) {
        if (this.soundsLoaded && window.soundManager) {
            try {
                window.soundManager.playSound(soundName);
            } catch (error) {
                console.warn('‚ö†Ô∏è Sound playback failed:', error);
            }
        }
    }
}