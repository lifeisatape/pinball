1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HTML (index.html)
–í –±–ª–æ–∫–µ game-over-controls –¥–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É –¥–æ–Ω–∞—Ç–∞:
<!-- Game Over Overlay -->
<div class="game-over-overlay" id="gameOverOverlay" style="display: none;">
    <div class="game-over-content">
        <h1>FINAL SCORE</h1>
        <div class="final-stats">
            <div class="stat">
                <span class="stat-label">‚≠êfinal score</span>
                <span class="stat-value" id="finalScore">0</span>
            </div>
            <div class="stat">
                <span class="stat-label">‚≠êhigh score</span>
                <span class="stat-value" id="finalHighScore">0</span>
            </div>
        </div>
        <div class="game-over-controls">
            <button class="restart-btn" id="restartGame">ONE MORE TIME</button>
            <button class="menu-btn" id="backToMenu">SELECT ROOM</button>
            
            <!-- üéØ –ù–û–í–´–ï FARCASTER –ö–ù–û–ü–ö–ò -->
            <div class="farcaster-actions" id="farcasterActions" style="display: none;">
                <button id="shareScoreBtn" class="farcaster-btn share-btn">
                    ‚≠ê SHARE SCORE ‚≠ê
                </button>
                <button id="donateBtn" class="farcaster-btn donate-btn">
                    üíé DONATE 1 USDC üíé
                </button>
                <button id="addToAppsBtn" class="farcaster-btn favorite-btn">
                    ‚≠ê ADD TO FAVORITES ‚≠ê
                </button>
            </div>
        </div>
    </div>
</div>
2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CSS (style.css)
–î–æ–±–∞–≤—å—Ç–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ Farcaster:
/* üéØ Farcaster Actions Section */
.farcaster-actions {
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid var(--border-color);
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.farcaster-btn {
    background: linear-gradient(135deg, #7C3AED, #5B21B6);
    color: white;
    border: none;
    border-radius: var(--border-radius);
    padding: 12px 20px;
    font-weight: 700;
    font-size: 12px;
    cursor: pointer;
    transition: var(--transition);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    position: relative;
    overflow: hidden;
}

.farcaster-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(124, 58, 237, 0.4);
}

.farcaster-btn:active {
    transform: translateY(0);
}

/* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–Ω–∞—Ç–∞ */
.donate-btn {
    background: linear-gradient(135deg, #F59E0B, #D97706);
    position: relative;
    animation: donateGlow 2s ease-in-out infinite alternate;
}

.donate-btn:hover {
    box-shadow: 0 6px 20px rgba(245, 158, 11, 0.5);
    transform: translateY(-2px) scale(1.02);
}

.share-btn {
    background: linear-gradient(135deg, #06B6D4, #0891B2);
}

.share-btn:hover {
    box-shadow: 0 6px 20px rgba(6, 182, 212, 0.4);
}

.favorite-btn {
    background: linear-gradient(135deg, #8B5CF6, #7C3AED);
}

.favorite-btn:hover {
    box-shadow: 0 6px 20px rgba(139, 92, 246, 0.4);
}

/* –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–Ω–∞—Ç–∞ */
@keyframes donateGlow {
    from {
        box-shadow: 0 0 20px rgba(245, 158, 11, 0.3);
    }
    to {
        box-shadow: 0 0 30px rgba(245, 158, 11, 0.6), 0 0 40px rgba(245, 158, 11, 0.4);
    }
}

/* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
@media (max-width: 480px) {
    .farcaster-btn {
        padding: 10px 16px;
        font-size: 11px;
    }
    
    .farcaster-actions {
        gap: 10px;
    }
}
3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ GameOverOverlay.js
ui/GameOverOverlay.js - –¥–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ –¥–æ–Ω–∞—Ç–∞:
class GameOverOverlay {
    constructor() {
        this.overlay = document.getElementById('gameOverOverlay');
        this.scoreElement = document.getElementById('finalScore');
        this.highScoreElement = document.getElementById('finalHighScore');
        
        // üéØ –ù–û–í–´–ï –≠–õ–ï–ú–ï–ù–¢–´
        this.farcasterActions = document.getElementById('farcasterActions');
        this.shareButton = document.getElementById('shareScoreBtn');
        this.donateButton = document.getElementById('donateBtn');
        this.addToAppsButton = document.getElementById('addToAppsBtn');
        
        this.setupEventListeners();
    }

    setupEventListeners() {
        // üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–Ω–∞—Ç–∞
        if (this.donateButton) {
            this.donateButton.addEventListener('click', async () => {
                await this.handleDonate();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —à–∞—Ä–∏–Ω–≥–∞
        if (this.shareButton) {
            this.shareButton.addEventListener('click', async () => {
                await this.handleShare();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        if (this.addToAppsButton) {
            this.addToAppsButton.addEventListener('click', async () => {
                await this.handleAddToFavorites();
            });
        }
    }

    show(gameState) {
        if (!this.overlay) return;

        this.overlay.style.display = 'flex';
        
        if (this.scoreElement) {
            this.scoreElement.textContent = gameState.score.toLocaleString();
        }
        
        if (this.highScoreElement) {
            this.highScoreElement.textContent = gameState.highScore.toLocaleString();
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Farcaster –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –≤ Mini App —Å—Ä–µ–¥–µ
        this.showFarcasterButtons();
    }

    showFarcasterButtons() {
        if (window.isMiniApp && window.sdk && this.farcasterActions) {
            this.farcasterActions.style.display = 'flex';
            console.log('‚úÖ Farcaster action buttons shown');
        }
    }

    // üéØ –ù–û–í–´–ô –ú–ï–¢–û–î –î–û–ù–ê–¢–ê
    async handleDonate() {
        if (!window.farcasterManager) {
            console.warn('FarcasterManager not available');
            return;
        }

        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.donateButton.textContent = 'üí´ SENDING...';
            this.donateButton.disabled = true;

            const result = await window.farcasterManager.sendDonation();
            
            if (result.success) {
                this.donateButton.textContent = '‚úÖ DONATED!';
                this.showNotification('Thank you for your donation! üíé', 'success');
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    this.donateButton.textContent = 'üíé DONATE 1 USDC üíé';
                    this.donateButton.disabled = false;
                }, 3000);
            } else {
                this.donateButton.textContent = '‚ùå FAILED';
                this.showNotification(`Donation failed: ${result.reason}`, 'error');
                
                setTimeout(() => {
                    this.donateButton.textContent = 'üíé DONATE 1 USDC üíé';
                    this.donateButton.disabled = false;
                }, 2000);
            }
        } catch (error) {
            console.error('Donation error:', error);
            this.donateButton.textContent = '‚ùå ERROR';
            this.showNotification('Donation error occurred', 'error');
            
            setTimeout(() => {
                this.donateButton.textContent = 'üíé DONATE 1 USDC üíé';
                this.donateButton.disabled = false;
            }, 2000);
        }
    }

    async handleShare() {
        if (window.farcasterManager) {
            await window.farcasterManager.shareScore();
        }
    }

    async handleAddToFavorites() {
        if (window.farcasterManager) {
            const success = await window.farcasterManager.addToFavorites();
            if (success) {
                this.showNotification('App added to favorites! ‚≠ê', 'success');
            }
        }
    }

    showNotification(message, type = 'info') {
        // –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#10B981' : type === 'error' ? '#EF4444' : '#0EA5E9'};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            z-index: 10000;
            animation: slideIn 0.3s ease;
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    hide() {
        if (this.overlay) {
            this.overlay.style.display = 'none';
        }
    }
}
4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ FarcasterManager.js
core/FarcasterManager.js - –º–µ—Ç–æ–¥ sendDonation:
// üéØ –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–Ω–∞—Ç–∞ —á–µ—Ä–µ–∑ sendToken
async sendDonation(amount = '1000000', recipientAddress = '0x7Ea45b01EECaE066f37500c92B10421937571f75') {
    if (!this.isFrameEnvironment || !this.sdk?.actions?.sendToken) {
        console.log('Farcaster SDK –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–æ–Ω–∞—Ç–∞');
        return { success: false, reason: 'sdk_unavailable' };
    }

    try {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∏—Ä—É—é –¥–æ–Ω–∞—Ç —á–µ—Ä–µ–∑ Farcaster SDK...');
        
        const result = await this.sdk.actions.sendToken({
            token: 'eip155:8453/erc20:0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913', // Base USDC
            amount: amount, // 1 USDC = 1000000 (6 decimals)
            recipientAddress: recipientAddress
        });

        if (result.success) {
            console.log('‚úÖ –î–æ–Ω–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', result.send.transaction);
            return result;
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–Ω–∞—Ç–µ:', result.error);
            return result;
        }
    } catch (error) {
        console.error('‚ùå Exception –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–Ω–∞—Ç–∞:', error);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
        if (error.name === 'RejectedByUser') {
            return { success: false, reason: 'rejected_by_user' };
        }
        
        return { success: false, reason: 'send_failed', error: error.message };
    }
}
5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ PinballGame.js
game/PinballGame.js - —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ GameOverOverlay –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:
constructor() {
    // ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    
    // üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GameOverOverlay —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    this.gameOverOverlay = new GameOverOverlay();
    
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥
}